# -*- coding: utf-8 -*-
"""LogisticRegClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EPWgNWgLFhMrV0G7OLvDVWJVpt9LsBCU

# Example 1
"""

# data load
import pandas as pd
from sklearn.datasets import load_iris
iris=load_iris()

# Convert data set to pandas data frame
df=pd.DataFrame(iris.data,columns=iris.feature_names)
df.head()

# See the categories of target variable
iris.target_names

# take a general notation
X = iris.data[:, :4]  # we only take the first four features.
Y = iris.target

# Split dataset into training and test dataset
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix,accuracy_score
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=1234)

# Create an instance of Logistic Regression Classifier and fit the data.
from sklearn.linear_model import LogisticRegression
logreg = LogisticRegression(C=1e5)
logreg.fit(X, Y)

#add constant to predictor variables
import statsmodels.api as sm
#fit linear regression model
model = sm.OLS(Y, X).fit()

#view model summary
print(model.summary())

# predict for the test dataset and generate classification report
predictionsModel = logreg.predict(X_test)
print('Classification Report:\n',classification_report(Y_test, predictionsModel))
print('Confusion Matrix:\n',confusion_matrix(Y_test, predictionsModel))
print('Accuracy Score:',accuracy_score(Y_test, predictionsModel))

"""# Another Example"""

from sklearn import svm, datasets
from sklearn import metrics
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_breast_cancer
import matplotlib.pyplot as plt

# Load Data
breast_cancer = load_breast_cancer()


# breast_cancer.data is a 2D array
# breast_cancer.feature_names is an array of columns labels
import pandas as pd
df_breast_cancer = pd. DataFrame(breast_cancer.data, columns=breast_cancer.feature_names)
df_breast_cancer['target'] = pd.Series(breast_cancer.target)
df_breast_cancer. head()

X = breast_cancer.data
y = breast_cancer.target
print(y)

# Split the Dataset to Train and Test
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3, random_state=1)

# Train the Model
clf = LogisticRegression(penalty='l2', C=0.1)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

# Test the model using AOC-ROC Graph
y_pred_proba = clf.predict_proba(X_test)[::,1]
fpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_proba)
auc = metrics.roc_auc_score(y_test, y_pred_proba)
plt.plot(fpr,tpr,label="data 1, auc="+str(auc))
plt.xlabel('False Positive Rate (1 - specificity)')
plt.ylabel('True Positive Rate (sensitivity)')
plt.title('ROC Curve for Breast Cancer Classifer')
plt.legend(loc="lower right")
plt.show()

#CORRELATION MAP
import seaborn as sn
plt.figure()
f, ax = plt.subplots(figsize=(20,20))
XX= pd. DataFrame(breast_cancer.data, columns=breast_cancer.feature_names)
corr_matrix = XX.corr()
sn.heatmap(corr_matrix, annot=True)
plt.show()